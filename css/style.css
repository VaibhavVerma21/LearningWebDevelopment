/* DATE: 24 Jan 23 */
#external{
    color: green;/* External styling */
}
/* Priority Order -> Inline > Internal > External */

.para{
    /* External styling */
    /* Need to add tag (<link rel="stylesheet" href="style.css">) in head to link the css file to that html file */
    color: white;
    background-color: black;
    border: 5px solid green;
    font-size: 30px;
    /* Just set "para" to the class of the elements that you want to have the above properties */
    /* Advantage: It works across more than one file that have been linked with the css file */
}


/* DATE: 25 Jan 23 */

/* Simple Selectors */
*{
    /* Universal Selector */
    margin: 10px;
    padding: 0;
    /* Only use of universal selector known till now */
}
h5{ 
    /* Element Selector */
    /* It selects all type of that kind of element */
    background-color: white;
    /* This will rarely be used */
} 
.class-selector{
    /* Class Selector. */
    color: blue;
}
#id-selector{
    /* ID Selector. */
    background-color: yellow;
}
.class1, class2, class3{
    /* Selector List */
    /* You can use comma , to select more than one class/ID to edit its properties */
    color: black
}

/* CSS Combinators */
div p{
    /* Descendent selector */
    /* Points to div as parent class and p as child class */
    background-color: aqua;
}
h3 > p {
    /* Child selector */
    /* Points to h3 as parent class and p as child class */
    background-color: blueviolet;
    /* Child and Descendent selector are almost same for now */
}
main + p{
    /* Adjacent sibling selector */
    /* It selects the first element(i.e. 'main' here) and the adjacent second element(i.e. 'p' here) */
    background-color: brown;
}
aside ~ p{
    /* General sibling selector */
    /* It selects the first element(i.e. 'aside' here) and the every second element(i.e. 'p' here) after it */
    /* background-color: chartreuse; */
}
/* Attribute selectors */
[target="_blank"]{
    /* [attribute="value"] Selector */
    /* This selector finds the elements with the same attribute and value in the tag */
    /* background-color:crimson; */
}
[alt~="pw"]{
    /* [attribute~="value"] Selector */
    /* This selector finds the elements with the same attribute and value(containing a specified word) in the tag */
    background-color: darkmagenta;
}

body {
    /* Activating Fonts from google in every part of body*/
    font-family: 'Poppins', sans-serif;
}

#box-model {
    padding: 10px 2px 10px 2px;/* top right bottom left --> Clockwise direction */
    /* padding-top: 10px; padding-right: 2px; padding-bottom: 10px; padding-left: 2px; */
    margin: 5px;
    border: solid 3px red;
}

#color {
    color : #f22efa;
}

body{
    background-color: #fff;
    background-image: url(../images/bg.jpg);
    /* background-image: url("https://images.pexels.com/photos/7708809/pexels-photo-7708809.jpeg?auto=compress&cs=tinysrgb&w=600&h=750&dpr=1"); */
    background-repeat: repeat;/* Can be on no-repeat or repeat-x or repeat-y. repeat is default */
    background-attachment: fixed;/* Makes the image not scroll on scrolling the tab. Default is scroll. Scroll and local look to be same */
    background-size:cover;/* Both cover and contain maintains aspect ratio of original image. 
    Cover makes the smallest width and height(while preserving aspect ratio) to cover the whole background image area.
    Contain makes the largest width and height(while preserving aspect ratio) to fit inside the background image area. */
}


/* DATE: 26 Jan 23 */

.padding{
    border: 7px solid black;/* For reference */
    padding: 50px 20px 50px 20px;/* top right bottom left --> Clockwise direction */
    /* padding-top: 50px; padding-right: 20px; padding-bottom: 50px; padding-left: 20px; */
    /* If 1 arrgument, padding is given to all sides */
    /* If 2 arrgument, padding is given to top-bottom and right-left */
    /* If 3 arrgument, padding is given to top and right-left and bottom */
    /* If 4 arrgument, padding is given to top and right and bottom and left */
}
.margin{
    border: solid red 2px;
    width: 200px;/* Makes the width limited to 200px */
    margin: auto;/* Assigns equal margin to left and right side */
    /* Margin can also be declared in the way that we have discussed about padding just above this section */
}

.text-manipulation{
    color:blueviolet; /* Changes color of text */
    text-align: justify;/* Left, Right and Centre text-alignment are self explanatory. Justify is a text alignment in which the sentence begins and ends in the same vertical line(like in books) */
    text-align-last: right;/*Aligns the last line only */
    direction:ltr;/* Sets direction of text. Idk its practical use, maybe used for different languages */
    text-decoration: underline;/* Text decorations like underline, etc */
    text-transform: capitalize;
    /* Changes to uppercase, lowercase, capitalize(First letter of a word is capital) */
    text-indent: 80px;/* Tells gap between first line and left margin */
    letter-spacing: 1px;/* Spacing between each letter */
    line-height: 25px;/* Height of each line */
    word-spacing: 5px;/* Spacing between each word */
}

.font-manipulation{
    font-family:monospace; /* Sets font only for this class */
    font-size: 32px;/* Sets font size */
    font-variant: small-caps;/* Makes the letter go in UPPERCASE but a bit smaller in size */
    font-weight: 500;/* Higger number = more bold */
}

.display-inline{
    display: inline;/* Changes behaviour of p from block to inline */
    color: brown;
}
.display-block{
    display: block;/* Changes behaviour of span from inline to block */
    color: seagreen;
}
.display-inlineNblock{
    display: inline-block;/* inline-block gives you the power to control the height and width of the element as the element is no longer a block element(Block element take up full width) */
    color: lawngreen;
}
.display-none{
    display: none;/* Hides the element */
}

.width{
    width: 100px;/* min-width and max-width can also be set */
    border: 5px red solid;
    display: inline-block;
    background-color: grey;
    /* If we set display:block and min-width low, then the element will take full width of the page as block element like to take up all the width they have available. This I found a think to keep a note of. */
}
.height{
    /* Works same as width. so i'm gonna add something else. */
    max-height: 50px;
    background-color: black;
    color: red;
    overflow: hidden;/* To hide the extra text that sticks out the box. Comment the overflow line to see the difference */
}


/* DATE: 27 Jan 23 */

/* To tag the element we do selector:pseudo-class */
.focus:focus{
    /* When focus/write in the text box */
    color: white;
    background-color: black;
    font-size: 50px;
}
.hover:hover{
    /* When hover on the element */
    color:white;
    background-color: pink;
}
.link:link{
    /* When none of visited, focus, active are happening/active */
    color: black;
    background-color: white;
}
.visited:visited{
    /* When the link has been visited */
    color: green;
    background-color: white;
}
.active:active{
    /* When clicking or holding or dragging the link */
    color:blue;
    background-color: white;
}
.first-child:first-child{
    /* First Occurence of that element */
    color:black;
    background-color: yellow;
}
.nth-child:nth-child(2n) {
    /* Nth occurence of that element */
    /* It is passed between () */
    /* It can be also number, formula like 1,4, 2n+1, 5n+1 */
    color:black;
    background-color: red;
}

/* To tag the element we do selector::pseudo-element */
.first-line::first-line{
    /* Effects first line */
    color: blue;
    background-color: #fff;
}
.first-letter::first-letter{
    /* Effects first letter */
    color: blue;
    background-color: #fff;
}
.before::before{
    /* Adds the content value in beginning of para */
    content: " Vaibhav ";
    color: violet;
}
.after::after{
    /* Adds the content value in ending of para */
    content: "Vaibhav";
    color: aqua;
}
.selection::selection{
    /* Sets the property when you select the text. */
    color:white;
    background-color: black;
}

.linear-gradient{
    /* Makes a linear gradient using the colors passed in the parameters in order */
    /* You can also give direction like to left, to top, to right */
    /* More number of same color can be passed to increase quantity of that color in gradient */
    background-image: linear-gradient(to left, red,yellow ,green,cyan ,blue ,blue);
    height: 500px;
}
.radial-gradient{
    /* Makes a radial gradient using the colors passed in the parameters in order */
    /* You can also give shape like circle and ellipse*/
    /* More number of same color can be passed to increase quantity of that color in gradient */
    background-image: radial-gradient(circle, red, red,yellow ,green,cyan ,blue);
    height: 500px;
}
.repeating-radial-gradient{
    /* Makes a repeating radial gradient using the colors passed in the parameters in order */
    /* You can also give shape like circle and ellipse*/
    /* More number of same color can be passed to increase quantity of that color in gradient. Percentage of color can also be passed */
    background-image: repeating-radial-gradient(
        circle,
          red 5%, 
          yellow 10% ,
          green 15%,
          cyan 20%,
          blue 25%
          );
    height: 500px;
}
.conical-gradient{
    /* Makes a conical gradient using the colors passed in the parameters in order */
    /* More number of same color can be passed to increase quantity of that color in gradient. Degree of colors can also be passed */
    background-image: conic-gradient(
          red 0deg,
          yellow 90deg ,
          green 180deg,
          cyan 270deg,
          blue 360deg
          );
    height: 500px;
}

.transition{
    height: 100px;
    width: 200px;
    color: white;
    background-color: black;
    transition: height 2s, width 2s, color 2s;/* Tells what needs to be transitioned and with how much time. Anything that changes and is not in transition will change instantly */
    transition-timing-function: ease-out;/* Seems about same for small time period */
    transition-delay: 1s;/* Delay between transtion activating */
}
.transition:hover{
    height: 250px;
    width:500px;
    color: black;
    background-color: white;
}

.animate{
    width: 100px;
    height: 100px;
    background-color: red;
    animation-name: animate;/* Calling the animation */
    animation-duration: 1s;/* Naked eye can't see animation in 0s but it happens. that's why we have to set the animation-duration */
    animation-delay: 1s;/* Delay for starting animation */
    position: relative;/* To make it change position. Will be taught later */
    animation-iteration-count: 1;/* Tells the no. of times of execution of animation */
    animation-direction: alternate-reverse;/* Sets the direction of the animation */
    animation-fill-mode: both; /* Backwards changes the color to 0% color before start, while Forwards changes the color to 100% color after end. Both applies both property */

    /* animation: name duration timing-function delay iteration-count direction fill-mode; This is also a shortcut to do the same as above */
}
.linear{
    animation-timing-function: linear;
}
.ease{
    animation-timing-function: ease;
}
.ease-in{
    animation-timing-function: ease-in;
}
.ease-out{
    animation-timing-function: ease-out;
}
.ease-in-out{
    animation-timing-function: ease-in-out;
}
@keyframes animate {
    /* Defining the animation. Its like a function. You have to call the function */

    /* from { background-color: blue;}
    to { background-color: yellow;} */

    0% {
        background-color: blue;
        top: 0px;
        left: 0px;
    }
    25% {
        background-color: yellow;
        top: 0px;
        left: 200px;
    }
    50% {
        background-color: black;
        top: 200px;
        left: 200px;
    }
    75% {
        background-color: aqua;
        top: 200px;
        left: 0;
    }
    100% {
        background-color: violet;
        top: 0px;
        left: 0px;
    }
}


/* DATE: 28 Jan 23 */

.media-query{
    height: 100px;
    text-align: center;
    font-size: 24px;
    background-color: red;
}
.media-query::after{
    content: "4th Screen";
}
@media (min-width: 768px) and (max-width:1000px){
    .media-query{
        background-color: white;
    }
    .media-query::after{
        content: "3rd Screen";
    }
}
@media (400px <= width <= 768px){
    /* Same as (min-width: 400px) and (max-width:768px) */
    .media-query{
        background-color: yellowgreen;
    }
    .media-query::after{
        content: "2nd Screen";
    }
}
@media (max-width:400px){
    .media-query{
        background-color: yellow;
    }
    .media-query::after{
        content: "1st Screen";
    }
}

.media-query-screens{
    height: 100px;
    text-align: center;
    font-size: 24px;
}
@media (width <= 600px){
    /* Extra small devices (phones, 600px and down) */
    .media-query-screens{
        background-color: red;
    }
    .media-query-screens::after{
        content: "Phones"
    }
}
@media (600px <= width <= 768px){
    /* Small devices (Portrait Tablets and Large Phones, 600px - 768px) */
    .media-query-screens{
        background-color: aquamarine;
    }
    .media-query-screens::after{
        content: "Portrait tablets and Large Phones";
    }
}
@media (768px <= width <= 992px){
    /* Medium devices (Landscape Tablets, 768px - 992px) */
    .media-query-screens{
        background-color: blue;
    }
    .media-query-screens::after{
        content: "Landscape Tablets";
    }
}
@media (992px <= width <= 1200px){
    /* Small devices (Laptops/Desktops, 992px - 1200px) */
    .media-query-screens{
        background-color: yellowgreen;
    }
    .media-query-screens::after{
        content: "Laptops/Desktops";
    }
}
@media (1200px <= width){
    /* Small devices (Large Laptops and Desktops, 1200px and up) */
    .media-query-screens{
        background-color: violet;
    }
    .media-query-screens::after{
        content: "Large Laptops and Desktops";
    }
}


/* DATE: 29 Jan 23 */

.float{
    background-color: white;
}
.float img{
    float: right;/* Moves/Floats the element to the right inside an containor */
}

.position{
    border: 1px solid black;
}
.position-fixed{
    width: 75px;
    height: 50px;
    color: white;
    background-color: black;
    text-align: center;
    /* This will keep the tag fixed 5px left and up from bottom-right corner even if we scroll the web page */
    position: fixed;
    bottom:600px;
    right: 5px;
    /* To make it circular in shape for better UI/UX */
    border-radius: 50px;
}
.position-sticky{
    width: 100px;
    height: 100px;
    background-color: red;
    /* Moves the tag when page is scrolled with 0px gap from top and untill the parent class ends */
    position: sticky;
    top: 0px;
}
.position-relative{
    width: 100px;
    height: 100px;
    background-color: yellow;
    /* It moves the element down 25px and right 150px from its original position */
    position: relative;
    top: 25px;
    left: 150px
}
.position-absolute{
    width: 100px;
    height: 100px;
    background-color: blue;
    /* It moves the element down 5655px and right 250px from the starting point of the body */
    position: absolute;
    top: 5655px;
    left: 250px;
}
.reference{
    width: 100px;
    height: 100px;
    background-color: white;
}

.overflow{
    width: 250px;
    height: 250px;
    border: 1px solid red;
    overflow: scroll;/* Scroll adds a scroll bar to access the content that is hidden. Hidden directly hides extra content and it isn't possible in it to access the overflow data */
}
.zindex{
    border: 1px solid black;
    height: 180px;
}
/* When two or more elements are overlapping, the one with more z-index value has more priority to being displayed on the screen over others */
.zindex-1{
    background-color: red;
    height: 100px;
    width: 100px;
    position: relative;
    top: -5px;
    z-index: 2;
}
.zindex-2{
    background-color: yellow;
    height: 100px;
    width: 100px;
    position: relative;
    top: -85px;
    z-index: 3;
}
.zindex-3{
    background-color: blue;
    height: 100px;
    width: 100px;
    position: relative;
    top: -160px
}