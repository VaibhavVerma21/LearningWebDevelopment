/* DATE: 24 Jan 23 */
#external{
    color: green;/* External styling */
}
/* Priority Order -> Inline > Internal > External */

.para{
    /* External styling */
    /* Need to add tag (<link rel="stylesheet" href="style.css">) in head to link the css file to that html file */
    color: white;
    background-color: black;
    border: 5px solid green;
    font-size: 30px;
    /* Just set "para" to the class of the elements that you want to have the above properties */
    /* Advantage: It works across more than one file that have been linked with the css file */
}


/* DATE: 25 Jan 23 */

/* Simple Selectors */
*{
    /* Universal Selector */
    margin: 10px;
    padding: 0;
    /* Only use of universal selector known till now */
}
h5{ 
    /* Element Selector */
    /* It selects all type of that kind of element */
    background-color: white;
    /* This will rarely be used */
} 
.class-selector{
    /* Class Selector. */
    color: blue;
}
#id-selector{
    /* ID Selector. */
    background-color: yellow;
}
.class1, class2, class3{
    /* Selector List */
    /* You can use comma , to select more than one class/ID to edit its properties */
    color: black
}

/* CSS Combinators */
div p{
    /* Descendent selector */
    /* Points to div as parent class and p as child class */
    background-color: aqua;
}
h3 > p {
    /* Child selector */
    /* Points to h3 as parent class and p as child class */
    background-color: blueviolet;
    /* Child and Descendent selector are almost same for now */
}
main + p{
    /* Adjacent sibling selector */
    /* It selects the first element(i.e. 'main' here) and the adjacent second element(i.e. 'p' here) */
    background-color: brown;
}
aside ~ p{
    /* General sibling selector */
    /* It selects the first element(i.e. 'aside' here) and the every second element(i.e. 'p' here) after it */
    /* background-color: chartreuse; */
}
/* Attribute selectors */
[target="_blank"]{
    /* [attribute="value"] Selector */
    /* This selector finds the elements with the same attribute and value in the tag */
    /* background-color:crimson; */
}
[alt~="pw"]{
    /* [attribute~="value"] Selector */
    /* This selector finds the elements with the same attribute and value(containing a specified word) in the tag */
    background-color: darkmagenta;
}

body {
    /* Activating Fonts from google in every part of body*/
    font-family: 'Poppins', sans-serif;
}

#box-model {
    padding: 10px 2px 10px 2px;/* top right bottom left --> Clockwise direction */
    /* padding-top: 10px; padding-right: 2px; padding-bottom: 10px; padding-left: 2px; */
    margin: 5px;
    border: solid 3px red;
}

#color {
    color : #f22efa;
}

body{
    background-color: #fff;
    background-image: url(../images/bg.jpg);
    /* background-image: url("https://images.pexels.com/photos/7708809/pexels-photo-7708809.jpeg?auto=compress&cs=tinysrgb&w=600&h=750&dpr=1"); */
    background-repeat: repeat;/* Can be on no-repeat or repeat-x or repeat-y. repeat is default */
    background-attachment: fixed;/* Makes the image not scroll on scrolling the tab. Default is scroll. Scroll and local look to be same */
    background-size:cover;/* Both cover and contain maintains aspect ratio of original image. 
    Cover makes the smallest width and height(while preserving aspect ratio) to cover the whole background image area.
    Contain makes the largest width and height(while preserving aspect ratio) to fit inside the background image area. */
}


/* DATE: 26 Jan 23 */

.padding{
    border: 7px solid black;/* For reference */
    padding: 50px 20px 50px 20px;/* top right bottom left --> Clockwise direction */
    /* padding-top: 50px; padding-right: 20px; padding-bottom: 50px; padding-left: 20px; */
    /* If 1 arrgument, padding is given to all sides */
    /* If 2 arrgument, padding is given to top-bottom and right-left */
    /* If 3 arrgument, padding is given to top and right-left and bottom */
    /* If 4 arrgument, padding is given to top and right and bottom and left */
}
.margin{
    border: solid red 2px;
    width: 200px;/* Makes the width limited to 200px */
    margin: auto;/* Assigns equal margin to left and right side */
    /* Margin can also be declared in the way that we have discussed about padding just above this section */
}

.text-manipulation{
    color:blueviolet; /* Changes color of text */
    text-align: justify;/* Left, Right and Centre text-alignment are self explanatory. Justify is a text alignment in which the sentence begins and ends in the same vertical line(like in books) */
    text-align-last: right;/*Aligns the last line only */
    direction:ltr;/* Sets direction of text. Idk its practical use, maybe used for different languages */
    text-decoration: underline;/* Text decorations like underline, etc */
    text-transform: capitalize;
    /* Changes to uppercase, lowercase, capitalize(First letter of a word is capital) */
    text-indent: 80px;/* Tells gap between first line and left margin */
    letter-spacing: 1px;/* Spacing between each letter */
    line-height: 25px;/* Height of each line */
    word-spacing: 5px;/* Spacing between each word */
}

.font-manipulation{
    font-family:monospace; /* Sets font only for this class */
    font-size: 32px;/* Sets font size */
    font-variant: small-caps;/* Makes the letter go in UPPERCASE but a bit smaller in size */
    font-weight: 500;/* Higger number = more bold */
}

.display-inline{
    display: inline;/* Changes behaviour of p from block to inline */
    color: brown;
}
.display-block{
    display: block;/* Changes behaviour of span from inline to block */
    color: seagreen;
}
.display-inlineNblock{
    display: inline-block;/* inline-block gives you the power to control the height and width of the element as the element is no longer a block element(Block element take up full width) */
    color: lawngreen;
}
.display-none{
    display: none;/* Hides the element */
}

.width{
    width: 100px;/* min-width and max-width can also be set */
    border: 5px red solid;
    display: inline-block;
    background-color: grey;
    /* If we set display:block and min-width low, then the element will take full width of the page as block element like to take up all the width they have available. This I found a think to keep a note of. */
}
.height{
    /* Works same as width. so i'm gonna add something else. */
    max-height: 50px;
    background-color: black;
    color: red;
    overflow: hidden;/* To hide the extra text that sticks out the box. Comment the overflow line to see the difference */
}


/* DATE: 27 Jan 23 */

/* To tag the element we do selector:pseudo-class */
.focus:focus{
    /* When focus/write in the text box */
    color: white;
    background-color: black;
    font-size: 50px;
}
.hover:hover{
    /* When hover on the element */
    color:white;
    background-color: pink;
}
.link:link{
    /* When none of visited, focus, active are happening/active */
    color: black;
    background-color: white;
}
.visited:visited{
    /* When the link has been visited */
    color: green;
    background-color: white;
}
.active:active{
    /* When clicking or holding or dragging the link */
    color:blue;
    background-color: white;
}
.first-child:first-child{
    /* First Occurence of that element */
    color:black;
    background-color: yellow;
}
.nth-child:nth-child(2n) {
    /* Nth occurence of that element */
    /* It is passed between () */
    /* It can be also number, formula like 1,4, 2n+1, 5n+1 */
    color:black;
    background-color: red;
}

/* To tag the element we do selector::pseudo-element */
.first-line::first-line{
    /* Effects first line */
    color: blue;
    background-color: #fff;
}
.first-letter::first-letter{
    /* Effects first letter */
    color: blue;
    background-color: #fff;
}
.before::before{
    /* Adds the content value in beginning of para */
    content: " Vaibhav ";
    color: violet;
}
.after::after{
    /* Adds the content value in ending of para */
    content: "Vaibhav";
    color: aqua;
}
.selection::selection{
    /* Sets the property when you select the text. */
    color:white;
    background-color: black;
}

.linear-gradient{
    /* Makes a linear gradient using the colors passed in the parameters in order */
    /* You can also give direction like to left, to top, to right */
    /* More number of same color can be passed to increase quantity of that color in gradient */
    background-image: linear-gradient(to left, red,yellow ,green,cyan ,blue ,blue);
    height: 500px;
}
.radial-gradient{
    /* Makes a radial gradient using the colors passed in the parameters in order */
    /* You can also give shape like circle and ellipse*/
    /* More number of same color can be passed to increase quantity of that color in gradient */
    background-image: radial-gradient(circle, red, red,yellow ,green,cyan ,blue);
    height: 500px;
}
.repeating-radial-gradient{
    /* Makes a repeating radial gradient using the colors passed in the parameters in order */
    /* You can also give shape like circle and ellipse*/
    /* More number of same color can be passed to increase quantity of that color in gradient. Percentage of color can also be passed */
    background-image: repeating-radial-gradient(
        circle,
          red 5%, 
          yellow 10% ,
          green 15%,
          cyan 20%,
          blue 25%
          );
    height: 500px;
}
.conical-gradient{
    /* Makes a conical gradient using the colors passed in the parameters in order */
    /* More number of same color can be passed to increase quantity of that color in gradient. Degree of colors can also be passed */
    background-image: conic-gradient(
          red 0deg,
          yellow 90deg ,
          green 180deg,
          cyan 270deg,
          blue 360deg
          );
    height: 500px;
}

.transition{
    height: 100px;
    width: 200px;
    color: white;
    background-color: black;
    transition: height 2s, width 2s, color 2s;/* Tells what needs to be transitioned and with how much time. Anything that changes and is not in transition will change instantly */
    transition-timing-function: ease-out;/* Seems about same for small time period */
    transition-delay: 1s;/* Delay between transtion activating */
}
.transition:hover{
    height: 250px;
    width:500px;
    color: black;
    background-color: white;
}

.animate{
    width: 100px;
    height: 100px;
    background-color: red;
    animation-name: animate;/* Calling the animation */
    animation-duration: 1s;/* Naked eye can't see animation in 0s but it happens. that's why we have to set the animation-duration */
    animation-delay: 1s;/* Delay for starting animation */
    position: relative;/* To make it change position. Will be taught later */
    animation-iteration-count: 1;/* Tells the no. of times of execution of animation */
    animation-direction: alternate-reverse;/* Sets the direction of the animation */
    animation-fill-mode: both; /* Backwards changes the color to 0% color before start, while Forwards changes the color to 100% color after end. Both applies both property */

    /* animation: name duration timing-function delay iteration-count direction fill-mode; This is also a shortcut to do the same as above */
}
.linear{
    animation-timing-function: linear;
}
.ease{
    animation-timing-function: ease;
}
.ease-in{
    animation-timing-function: ease-in;
}
.ease-out{
    animation-timing-function: ease-out;
}
.ease-in-out{
    animation-timing-function: ease-in-out;
}
@keyframes animate {
    /* Defining the animation. Its like a function. You have to call the function */

    /* from { background-color: blue;}
    to { background-color: yellow;} */

    0% {
        background-color: blue;
        top: 0px;
        left: 0px;
    }
    25% {
        background-color: yellow;
        top: 0px;
        left: 200px;
    }
    50% {
        background-color: black;
        top: 200px;
        left: 200px;
    }
    75% {
        background-color: aqua;
        top: 200px;
        left: 0;
    }
    100% {
        background-color: violet;
        top: 0px;
        left: 0px;
    }
}


/* DATE: 28 Jan 23 */

.media-query{
    height: 100px;
    text-align: center;
    font-size: 24px;
    background-color: red;
}
.media-query::after{
    content: "4th Screen";
}
@media (min-width: 768px) and (max-width:1000px){
    .media-query{
        background-color: white;
    }
    .media-query::after{
        content: "3rd Screen";
    }
}
@media (400px <= width <= 768px){
    /* Same as (min-width: 400px) and (max-width:768px) */
    .media-query{
        background-color: yellowgreen;
    }
    .media-query::after{
        content: "2nd Screen";
    }
}
@media (max-width:400px){
    .media-query{
        background-color: yellow;
    }
    .media-query::after{
        content: "1st Screen";
    }
}

.media-query-screens{
    height: 100px;
    text-align: center;
    font-size: 24px;
}
@media (width <= 600px){
    /* Extra small devices (phones, 600px and down) */
    .media-query-screens{
        background-color: red;
    }
    .media-query-screens::after{
        content: "Phones"
    }
}
@media (600px <= width <= 768px){
    /* Small devices (Portrait Tablets and Large Phones, 600px - 768px) */
    .media-query-screens{
        background-color: aquamarine;
    }
    .media-query-screens::after{
        content: "Portrait tablets and Large Phones";
    }
}
@media (768px <= width <= 992px){
    /* Medium devices (Landscape Tablets, 768px - 992px) */
    .media-query-screens{
        background-color: blue;
    }
    .media-query-screens::after{
        content: "Landscape Tablets";
    }
}
@media (992px <= width <= 1200px){
    /* Small devices (Laptops/Desktops, 992px - 1200px) */
    .media-query-screens{
        background-color: yellowgreen;
    }
    .media-query-screens::after{
        content: "Laptops/Desktops";
    }
}
@media (1200px <= width){
    /* Small devices (Large Laptops and Desktops, 1200px and up) */
    .media-query-screens{
        background-color: violet;
    }
    .media-query-screens::after{
        content: "Large Laptops and Desktops";
    }
}


/* DATE: 29 Jan 23 */

.float{
    background-color: white;
}
.float img{
    float: right;/* Moves/Floats the element to the right inside an containor */
}

.position{
    border: 1px solid black;
}
.position-fixed{
    width: 75px;
    height: 50px;
    color: white;
    background-color: black;
    text-align: center;
    /* This will keep the tag fixed 5px left and up from bottom-right corner even if we scroll the web page */
    position: fixed;
    bottom:600px;
    right: 5px;
    /* To make it circular in shape for better UI/UX */
    border-radius: 50px;
}
.position-sticky{
    width: 100px;
    height: 100px;
    background-color: red;
    /* Moves the tag when page is scrolled with 0px gap from top and untill the parent class ends */
    position: sticky;
    top: 0px;
}
.position-relative{
    width: 100px;
    height: 100px;
    background-color: yellow;
    /* It moves the element down 25px and right 150px from its original position */
    position: relative;
    top: 25px;
    left: 150px
}
.position-absolute{
    width: 100px;
    height: 100px;
    background-color: blue;
    /* It moves the element down 5655px and right 250px from the starting point of the body */
    position: absolute;
    top: 5655px;
    left: 250px;
}
.reference{
    width: 100px;
    height: 100px;
    background-color: white;
}

.overflow{
    width: 250px;
    height: 250px;
    border: 1px solid red;
    overflow: scroll;/* Scroll adds a scroll bar to access the content that is hidden. Hidden directly hides extra content and it isn't possible in it to access the overflow data */
}
.zindex{
    border: 1px solid black;
    height: 180px;
}
/* When two or more elements are overlapping, the one with more z-index value has more priority to being displayed on the screen over others */
.zindex-1{
    background-color: red;
    height: 100px;
    width: 100px;
    position: relative;
    top: -5px;
    z-index: 2;
}
.zindex-2{
    background-color: yellow;
    height: 100px;
    width: 100px;
    position: relative;
    top: -85px;
    z-index: 3;
}
.zindex-3{
    background-color: blue;
    height: 100px;
    width: 100px;
    position: relative;
    top: -160px
}


/* DATE: 30 Jan 23 */

.flex-box-container-parent{
    border: solid 1px black;
    display: flex;/* With inline-flex it functions same as flex but its inline in nature in place of block */
    flex-direction: row;/* Row makes in horizontal while column makes it vertical. reverse version of it simply reverses the property. Default is row */
    flex-wrap: nowrap;/* Tells if the elements will wrap in different lines or not. Wrap means that they will retain their set height and width and just take extra space of parent container in place of decreasing their width to fit within the containor when the browser window is shrank or expanded. Reverse mode of wrap is also available */
    flex-flow: row nowrap; /* Shortcut way to set flex-direction and flex-wrap together. */
    justify-content: space-evenly;/* Adjusts the content on the main/x axis line. space-around sets equal space to each element. space-evenly sets equal space between each element and the border. space-between sets equal space between elements only. space-around and space-evenly and space-between are different.*/
    align-items: center;/* Adjusts the content on the cross/y axis line. */
    align-content: center;/* Idk whats this is */
    gap: 100px;/* Adds gap of 100px to each side. won't work because of justify-content and align-items. To add specifically in row or column use row-gap or column-gap */
}
.flex-box-container{
    height: 100px;
    width: 100px;
    border: solid 1px black;
}
.flex-box-container1{
    background-color: red;
}
.flex-box-container2{
    background-color: yellow;
}
.flex-box-container3{
    background-color: green;
}

.flex-box-items-parent{
    border: solid 1px black;
    display: flex; /* With inline-flex it functions same as flex but its inline in nature in place of block */
    height: 200px;
}
/* Upcoming properties manipulate the child elements and not the parent/container element */
.flex-box-items{
    height: 100px;
    width: 100px;
    border: solid 1px black;
}
.flex-box-items1{
    background-color: red;
    order: 5; /* Order is used to arrange flex items with the container. The element/item with least order value will be rendered first */
    flex-grow: 3;/* It defines how much more space it will occupy compared to other flex-items when there is more availabe space(browser expands) Default is 0 i.e. it will have no effect on grow propotion */
    flex-shrink: 5;/* Same as glex-grow but in place of growing it is about shrinking */
    flex-basis: 200px;/* It is used to set the initial size of the flex items before the space is distributed according to flex grow or flex shrink. */
    flex: 3, 5, 200px; /* Shortcut for setting flex-grow, flex-shrink and flex-basis */
}
.flex-box-items2{
    background-color: yellow;
    order: 1;
    flex-grow: 5;
    flex-shrink: 3;
    flex-basis: 150px;
    flex: 5, 3, 150px;
    align-self: center;/* It is used to align a flex-item(itself) inside its flex container. */
}
.flex-box-items3{
    background-color: green;
    order: 3;
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 100px;
    flex: 1, 1, 100px;
}


/* DATE: 31 Jan 23 */

.grid-parent-container{
    display: grid;
    grid-template-columns: auto auto auto;/* The no. of parameters(3 auto's) passed will be equal to the no. of columns formed. 1fr 2fr 1fr can be treated like ratio of 1:2:1. Auto can be used to space the columns evenly.*/
    grid-template-rows: 500px 200px 200px;/* Works same as grid-template-columns but it defines the height of each row. height, width (in .grid-child) is overwritting it so it isn't showing how the parameters ask it to show. Comment to see the difference. */
    /* 1fr 1fr 1fr can be also written as repeat(3, auto); */
    /* minmax(10px, 1fr) gives the value to be min of 10px and max of 1fr. It can be said that it sets a range of values for the property */
    gap: 100px; /* Adds gap of 100px to each side. To add specifically in row or column use row-gap or column-gap */
    justify-content: center;/* Adjusts the parent class on the main/x axis line. */
    align-items: center;/* Adjusts the parent class on the cross/y axis line. */
}
.grid-child{
    height: 100px;
    width: 100px;
    margin: 10px;
    border: 2px solid black;
}
.grid-child1{
    background-color: red;
    /* Looks simillar to flex properties */
    justify-self: center;/* Align itself(child class) horizontally */
    align-self: center;/* Align itself(child class) vertically */
}
.grid-child2{
    background-color: yellow;
}
.grid-child3{
    background-color: green;
}

.grid-parent-container-album{
    display: grid;
    height: 700px;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 100px);
}
.grid-child-album{
    /* height: 100px;
    width: 100px; */
}
.grid-child-album1{
    background-color: red;
    grid-row-start: 1;/* Top margin is 1 then the margin below is 2 and so on */
    grid-row-end: 3;/* Way to Merge Row-Wise */
    /* When expanding rows, you would expect that the whole row moves down, but individual items move to their right and if they are on their right-most side they move down one to the left-most side */
}
.grid-child-album2{
    background-color: green;
}
.grid-child-album3{
    background-color: yellow;
}
.grid-child-album4{
    background-color: pink;
    grid-column-start: 2;/* Left margin is 1 then the margin right to it is 2 and so on */
    grid-column-end: 4;/* Way to Merge Column-Wise */
    /* When expanding columns, you would expect that the whole column moves right and create and additional row, but individual items move to their right and if they are on their right-most side they move down one to the left-most side */
}
.grid-child-album5{
    background-color: brown;
}
.grid-child-album6{
    background-color: purple;
}
.grid-child-album7{
    background-color: violet;
}
.grid-child-album8{
    background-color: yellowgreen;
}
.grid-child-album9{
    background-color: magenta;
}


/* DATE: 7 Feb 23 */

.unit-div{
    border: 5px solid red;
}
.unit-main{
    border: 5px solid black;
}
.percentage{
    width: 50%;
    /* Makes it take 50 percent of width with respect to its parent class */
}
.vh-vw{
    width: 50vw;
    /* vw sets the 50 percent of the VIEW PORT WIDTH. So if view port width is 1080px then 50vw will be 540 */
}
/* vh-vw are different from percentage. Percentage sets percent of width/height with respect to its parent class while vh-vw sets percent of width/height with respect to the viewport width/height. that's why in vh-vw class you see the main coming out of div on the webpage. It is because they both are set to 50vw which means they have equal width. Due to 10px margin the gap is seen. */
/* 100% can be 100% of the height of anything. For example, if I have a parent div that's 1000px tall, and a child div that is at 100% height, then that child div could theoretically be much taller than the height of the viewport, or much smaller than the height of the viewport, even though that div is set at 100% height. If I instead make that child div set at 100vh, then it'll only fill up 100% of the height of the viewport, and not necessarily the parent div. */
/* Suppose you have a <div>, direct child of <body> that you want filling the whole viewport, so you use width: 100vw; height: 100vh;. It all works just the same as width: 100%; height: 100vh; until you add more content and a vertical scrollbar shows up. Since the vw account for the scrollbar as part of the viewport, width: 100vw; will be slightly bigger than width: 100%;. This little difference ends up adding a horizontal scrollbar (required for the user to see that little extra width) and by consequence, the height would also be a little different on both cases. */
/* https://stackoverflow.com/questions/31039979/css-units-what-is-the-difference-between-vh-vw-and Check this link for examples for the above two explanation. */
.em.unit-div{
    font-size: 30px;
}
.em.unit-main{
    font-size: 2em;/* em of property is equal to times of that property of parent. 2em in this case means 60px */
}
.rem.unit-div{
    font-size: 30px;
}
.rem.unit-main{
    font-size: 2rem;/* rem is called root(html/body) em. rem of a property is equal to times of that property of root. By default value of font of html/body(root) is 16px. So 2rem means 32px */
}